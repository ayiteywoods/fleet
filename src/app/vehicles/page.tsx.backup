'use client'

import { useState } from 'react'
import { 
  Truck, 
  CheckCircle, 
  User, 
  Wrench, 
  AlertTriangle, 
  UserX,
  Plus,
  Download,
  FileText,
  FileSpreadsheet,
  Printer,
  Search,
  Eye,
  Edit,
  X,
  ChevronUp,
  ChevronDown,
  Settings
} from 'lucide-react'
import { useTheme } from '@/contexts/ThemeContext'
import DashboardLayout from '@/components/DashboardLayout'

export default function VehiclesPage() {
  const { themeMode } = useTheme()
  const [searchQuery, setSearchQuery] = useState('')
  const [entriesPerPage, setEntriesPerPage] = useState(10)
  const [currentPage, setCurrentPage] = useState(1)
  const [sortColumn, setSortColumn] = useState('')
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc')
  const [showFieldSelector, setShowFieldSelector] = useState(false)
  const [selectedFields, setSelectedFields] = useState([
    'reg_number', 'vin_number', 'status', 'current_region', 'current_district',
    'last_service_date'
  ])

  // Debug: Log selected fields count
  console.log('Selected fields count:', selectedFields.length)
  console.log('Table width should be:', selectedFields.length > 6 ? '1200px' : '100%')

  // All available fields from the vehicles table
  const availableFields = [
    { key: 'reg_number', label: 'Registration Number', type: 'text' },
    { key: 'vin_number', label: 'VIN Number', type: 'text' },
    { key: 'trim', label: 'Trim', type: 'text' },
    { key: 'year', label: 'Year', type: 'number' },
    { key: 'status', label: 'Status', type: 'status' },
    { key: 'color', label: 'Color', type: 'text' },
    { key: 'engine_number', label: 'Engine Number', type: 'text' },
    { key: 'chassis_number', label: 'Chassis Number', type: 'text' },
    { key: 'current_region', label: 'Current Region', type: 'text' },
    { key: 'current_district', label: 'Current District', type: 'text' },
    { key: 'current_mileage', label: 'Current Mileage', type: 'number' },
    { key: 'last_service_date', label: 'Last Service Date', type: 'date' },
    { key: 'next_service_km', label: 'Next Service (Km)', type: 'number' },
    { key: 'type_id', label: 'Vehicle Type ID', type: 'number' },
    { key: 'make_id', label: 'Make ID', type: 'number' },
    { key: 'notes', label: 'Notes', type: 'text' },
    { key: 'created_at', label: 'Created At', type: 'date' },
    { key: 'updated_at', label: 'Updated At', type: 'date' }
  ]

  // Sample data based on actual database schema
  const vehicles = [
    {
      id: 1,
      reg_number: 'GT-8990-25',
      vin_number: 'GTBL087w32',
      trim: 'Base',
      year: 2023,
      status: 'Active',
      color: 'White',
      engine_number: 'ENG123456',
      chassis_number: 'CHS123456',
      current_region: 'Greater Accra',
      current_district: 'Accra',
      current_mileage: 15000.50,
      last_service_date: '2024-01-15',
      next_service_km: 20000,
      type_id: 1,
      make_id: 1,
      notes: 'Regular maintenance vehicle'
    }
  ]

  const kpiCards = [
    { title: 'Total', value: '1', icon: Truck, color: 'blue' },
    { title: 'Active', value: '1', icon: CheckCircle, color: 'green' },
    { title: 'Assigned', value: '0', icon: User, color: 'purple' },
    { title: 'In Service', value: '0', icon: Wrench, color: 'orange' },
    { title: 'Need Repair', value: '0', icon: AlertTriangle, color: 'red' },
    { title: 'Unassigned', value: '1', icon: UserX, color: 'gray' }
  ]

  const handleSort = (column: string) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortColumn(column)
      setSortDirection('asc')
    }
  }

  const toggleField = (fieldKey: string) => {
    if (selectedFields.includes(fieldKey)) {
      setSelectedFields(selectedFields.filter(f => f !== fieldKey))
    } else {
      setSelectedFields([...selectedFields, fieldKey])
    }
  }

  const getSelectedFieldsData = () => {
    return selectedFields.map(fieldKey => 
      availableFields.find(field => field.key === fieldKey)
  ).filter(Boolean)
  }

  const formatFieldValue = (field: any, value: any) => {
    if (!value && value !== 0) return '-'
    
    switch (field.type) {
      case 'number':
        if (field.key.includes('mileage') || field.key.includes('km')) {
          return `${Number(value).toLocaleString()} km`
        }
        return Number(value).toLocaleString()
      case 'date':
        return new Date(value).toLocaleDateString()
      case 'status':
        return (
          <span className={`px-2 py-1 rounded-full text-xs ${
            value === 'Active' 
              ? 'bg-green-100 text-green-800' 
              : 'bg-red-100 text-red-800'
          }`}>
            {value}
          </span>
      )
      default:
        return value
    }
  }

  const getSortIcon = (column: string) => {
    if (sortColumn !== column) {
      return (
        <div className="flex flex-col">
          <ChevronUp className="w-3 h-3 text-blue-300" />
          <ChevronDown className="w-3 h-3 text-blue-300" />
        </div>
    )
    }
    return sortDirection === 'asc' ? 
      <div className="flex flex-col">
        <ChevronUp className="w-3 h-3 text-white" />
        <ChevronDown className="w-3 h-3 text-blue-300" />
      </div> : 
      <div className="flex flex-col">
        <ChevronUp className="w-3 h-3 text-blue-300" />
        <ChevronDown className="w-3 h-3 text-white" />
      </div>
  }

  return (
    <DashboardLayout>
      <div className="p-6">
        {/* KPI Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 mb-6">
          {kpiCards.map((card, index) => {
            const IconComponent = card.icon
            return (
              <div key={index} className={`p-4 rounded-lg shadow-sm ${
                themeMode === 'dark' ? 'bg-gray-800' : 'bg-white'
              }`}>
                <div className="flex items-center justify-between mb-2">
                  <IconComponent className="w-8 h-8 text-blue-600" />
                </div>
                <h3 className={`text-sm font-medium ${
                  themeMode === 'dark' ? 'text-gray-300' : 'text-gray-600'
                }`}>
                  {card.title}
                </h3>
                <p className={`text-2xl font-bold ${
                  themeMode === 'dark' ? 'text-white' : 'text-gray-900'
                }`}>
                  {card.value}
                </p>
              </div>
          )
          })}
        </div>

        {/* Main Content Area */}
        <div className={`rounded-lg shadow-sm ${
          themeMode === 'dark' ? 'bg-gray-800' : 'bg-white'
        }`} style={{ 
          overflow: 'hidden',
          width: '100%',
          maxWidth: '100%'
        }}>
          {/* Header Controls */}
          <div className="p-6 border-b border-gray-200">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
              {/* Left Side - Filter Buttons */}
              <div className="flex gap-2">
                <button className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  themeMode === 'dark' 
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}>
                  MAKE
                </button>
                <button className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                  themeMode === 'dark' 
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}>
                  MODEL
                </button>
              </div>

              {/* Right Side - Add Vehicle Button */}
              <button className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                <Plus className="w-4 h-4" />
                <span className="text-sm font-medium">ADD VEHICLE</span>
              </button>
            </div>

            {/* Table Controls */}
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mt-6">
              {/* Entries Display */}
              <div className="flex items-center gap-2">
                <span className={`text-sm ${
                  themeMode === 'dark' ? 'text-gray-300' : 'text-gray-700'
                }`}>
                  Show
                </span>
                <select
                  value={entriesPerPage}
                  onChange={(e) => setEntriesPerPage(Number(e.target.value))}
                  className={`px-3 py-1 border rounded text-sm ${
                    themeMode === 'dark' 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'bg-white border-gray-300 text-gray-900'
                  }`}
                >
                  <option value={10}>10</option>
                  <option value={25}>25</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                </select>
                <span className={`text-sm ${
                  themeMode === 'dark' ? 'text-gray-300' : 'text-gray-700'
                }`}>
                  entries
                </span>
              </div>

              {/* Export/Print Buttons */}
              <div className="flex gap-2">
                <button 
                  onClick={() => setShowFieldSelector(!showFieldSelector)}
                  className="flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors bg-orange-600 text-white hover:bg-orange-700"
                >
                  <Settings className="w-4 h-4" />
                  SELECT COLUMNS ({selectedFields.length})
                </button>
                <button className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                  themeMode === 'dark' 
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}>
                  <FileSpreadsheet className="w-4 h-4" />
                  EXCEL
                </button>
                <button className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                  themeMode === 'dark' 
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}>
                  <FileText className="w-4 h-4" />
                  CSV
                </button>
                <button className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                  themeMode === 'dark' 
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}>
                  <FileText className="w-4 h-4" />
                  PDF
                </button>
                <button className={`flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                  themeMode === 'dark' 
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}>
                  <Printer className="w-4 h-4" />
                  PRINT
                </button>
              </div>

              {/* Search Bar */}
              <div className="flex items-center gap-2">
                <span className={`text-sm ${
                  themeMode === 'dark' ? 'text-gray-300' : 'text-gray-700'
                }`}>
                  Search:
                </span>
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Search vehicles..."
                    className={`pl-10 pr-4 py-2 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      themeMode === 'dark' 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                    }`}
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Field Selector Modal */}
          {showFieldSelector && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div className={`w-96 max-h-96 rounded-lg shadow-lg ${
                themeMode === 'dark' ? 'bg-gray-800' : 'bg-white'
              }`}>
                <div className={`p-4 border-b ${
                  themeMode === 'dark' ? 'border-gray-700' : 'border-gray-200'
                }`}>
                  <div className="flex items-center justify-between">
                    <h3 className={`text-lg font-medium ${
                      themeMode === 'dark' ? 'text-white' : 'text-gray-900'
                    }`}>
                      Select Columns to Display
                    </h3>
                    <button
                      onClick={() => setShowFieldSelector(false)}
                      className={`p-1 rounded ${
                        themeMode === 'dark' ? 'hover:bg-gray-700' : 'hover:bg-gray-100'
                      }`}
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </div>
                  <p className={`text-sm mt-1 ${
                    themeMode === 'dark' ? 'text-gray-400' : 'text-gray-600'
                  }`}>
                    Choose columns to display in the table (6 columns by default, more will enable horizontal scroll)
                  </p>
                </div>
                <div className="p-4 max-h-64 overflow-y-auto">
                  <div className="grid grid-cols-1 gap-2">
                    {availableFields.map((field) => (
                      <label
                        key={field.key}
                        className={`flex items-center p-2 rounded cursor-pointer transition-colors ${
                          selectedFields.includes(field.key)
                            ? themeMode === 'dark'
                              ? 'bg-orange-600 text-white'
                              : 'bg-orange-100 text-orange-900'
                            : themeMode === 'dark'
                            ? 'hover:bg-gray-700 text-gray-300'
                            : 'hover:bg-gray-50 text-gray-700'
                        }`}
                      >
                        <input
                          type="checkbox"
                          checked={selectedFields.includes(field.key)}
                          onChange={() => toggleField(field.key)}
                          className="mr-3"
                        />
                        <span className="text-sm">{field.label}</span>
                        <span className={`ml-auto text-xs ${
                          themeMode === 'dark' ? 'text-gray-400' : 'text-gray-500'
                        }`}>
                          {field.type}
                        </span>
                      </label>
                  ))}
                  </div>
                </div>
                <div className={`p-4 border-t ${
                  themeMode === 'dark' ? 'border-gray-700' : 'border-gray-200'
                }`}>
                  <div className="flex justify-between items-center">
                    <span className={`text-sm ${
                      themeMode === 'dark' ? 'text-gray-400' : 'text-gray-600'
                    }`}>
                      {selectedFields.length} columns selected
                    </span>
                    <button
                      onClick={() => setShowFieldSelector(false)}
                      className="px-4 py-2 bg-orange-600 text-white rounded hover:bg-orange-700 transition-colors"
                    >
                      Apply
                    </button>
                  </div>
                </div>
              </div>
            </div>
        )}

          {/* Vehicle Table */}
          <div className="bg-white rounded-lg shadow-sm overflow-hidden">
            {/* Debug info */}
            {selectedFields.length > 6 && (
              <div className="bg-green-100 p-2 text-sm text-green-800 mb-2">
                ✅ {selectedFields.length} fields selected - Container: 400px, Table: 2000px - Horizontal scroll is now active!
              </div>
            )}
            <div 
              style={{
                width: selectedFields.length > 6 ? '400px' : '100%',
                maxWidth: selectedFields.length > 6 ? '400px' : '100%',
                overflow: 'hidden',
                border: selectedFields.length > 6 ? '3px solid red' : 'none',
                backgroundColor: selectedFields.length > 6 ? '#f0f0f0' : 'transparent'
              }}
            >
              <div 
                style={{
                  width: '100%',
                  overflowX: 'scroll',
                  overflowY: 'hidden'
                }}
              >
                <table 
                  style={{ 
                    width: selectedFields.length > 6 ? '2000px' : '100%',
                    minWidth: selectedFields.length > 6 ? '2000px' : '100%',
                    tableLayout: 'auto'
                  }}
                >
                <thead className={`bg-blue-600 text-white`}>
                  <tr>
                    <th className="px-4 py-3 text-left text-sm font-medium whitespace-nowrap" style={{ width: '100px' }}>Actions</th>
                    <th className="px-4 py-3 text-left text-sm font-medium whitespace-nowrap" style={{ width: '60px' }}>No</th>
                    {getSelectedFieldsData().map((field) => (
                      <th 
                        key={field.key}
                        className="px-4 py-3 text-left text-sm font-medium cursor-pointer hover:bg-blue-700 whitespace-nowrap"
                        onClick={() => handleSort(field.key)}
                        style={{ width: '150px' }}
                      >
                        <div className="flex items-center gap-1">
                          {field.label}
                          {getSortIcon(field.key)}
                        </div>
                      </th>
                  ))}
                  </tr>
                </thead>
                <tbody className={`divide-y ${
                themeMode === 'dark' ? 'divide-gray-700' : 'divide-gray-200'
              }`}>
                {vehicles.map((vehicle) => (
                  <tr key={vehicle.id} className={`hover:bg-gray-50 ${
                    themeMode === 'dark' ? 'hover:bg-gray-700' : ''
                  }`}>
                    <td className="px-4 py-3 whitespace-nowrap" style={{ width: '100px' }}>
                      <div className="flex items-center gap-2">
                        <button className="p-1 text-blue-600 hover:text-blue-800 transition-colors">
                          <Eye className="w-4 h-4" />
                        </button>
                        <button className="p-1 text-green-600 hover:text-green-800 transition-colors">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button className="p-1 text-red-600 hover:text-red-800 transition-colors">
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                    <td className={`px-4 py-3 text-sm whitespace-nowrap ${
                      themeMode === 'dark' ? 'text-gray-300' : 'text-gray-900'
                    }`} style={{ width: '60px' }}>
                      {vehicle.id}
                    </td>
                    {getSelectedFieldsData().map((field) => (
                      <td key={field.key} className={`px-4 py-3 text-sm whitespace-nowrap ${
                        themeMode === 'dark' ? 'text-gray-300' : 'text-gray-900'
                      }`} style={{ width: '150px' }}>
                        {formatFieldValue(field, vehicle[field.key as keyof typeof vehicle])}
                      </td>
                  ))}
                  </tr>
              ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          {/* Pagination */}
          <div className="px-6 py-4 border-t border-gray-200 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className={`text-sm ${
              themeMode === 'dark' ? 'text-gray-300' : 'text-gray-700'
            }`}>
              Showing 1 to {vehicles.length} of {vehicles.length} entries
            </div>
            <div className="flex items-center gap-2">
              <button 
                disabled={currentPage === 1}
                className={`px-3 py-1 rounded text-sm ${
                  currentPage === 1 
                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
                    : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
                }`}
              >
                Prev
              </button>
              <button className="px-3 py-1 bg-blue-600 text-white rounded text-sm">
                1
              </button>
              <button 
                disabled={true}
                className="px-3 py-1 bg-gray-100 text-gray-400 rounded text-sm cursor-not-allowed"
              >
                Next
              </button>
            </div>
          </div>
        </div>
      </div>
    </DashboardLayout>
  )
}
